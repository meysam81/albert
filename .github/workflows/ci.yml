name: ci
concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches:
      - main
    tags:
      - v*
  pull_request:
    branches:
      - main
  schedule:
    - cron: "15 5 */1 * *"

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Install Rust
        run: |
          rustup toolchain install nightly
      - name: Run tests
        run: |
          cargo test --all-features --all-targets --all | tee -a $GITHUB_STEP_SUMMARY

  build:
    runs-on: ${{ matrix.image }}
    permissions:
      contents: write
    strategy:
      matrix:
        include:
          - image: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - image: macos-latest
            target: x86_64-apple-darwin
          - image: ubuntu-latest
            target: x86_64-unknown-linux-musl
          - image: macos-latest
            target: aarch64-apple-darwin
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Cache cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Install Rust stable
        run: |
          rustup toolchain install stable --target ${{ matrix.target }}
      - if: contains(matrix.target, 'musl')
        name: Install musl
        run: |
          sudo apt update
          sudo apt install -y musl-tools
      - name: Build
        run: |
          cargo build --release --target ${{ matrix.target }}
      - name: Rename binary
        run: |
          cp target/${{ matrix.target }}/release/al target/${{ matrix.target }}/release/al-${{ matrix.target }}
      - name: Install sha256sum for macOS
        if: contains(matrix.target, 'darwin')
        run: |
          brew install coreutils
      - name: Checksum
        run: |
          cd target/${{ matrix.target }}/release
          sha256sum al-${{ matrix.target }} > al-${{ matrix.target }}.sha256
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: al-${{ matrix.target }}
          path: |
            target/${{ matrix.target }}/release/al-${{ matrix.target }}
            target/${{ matrix.target }}/release/al-${{ matrix.target }}.sha256
          if-no-files-found: error
      - if: startsWith(github.ref, 'refs/tags/v')
        name: Upload assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            target/${{ matrix.target }}/release/al-${{ matrix.target }}
            target/${{ matrix.target }}/release/al-${{ matrix.target }}.sha256

  pr-labeler:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - uses: actions/labeler@v4
        with:
          repo-token: "${{ secrets.GITHUB_TOKEN }}"

  stale-discovery:
    if: github.event_name == 'schedule'
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
    steps:
      - uses: actions/stale@v8
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          stale-issue-message: "This issue is stale because it has been open for 30 days with no activity. Remove this label to keep it open."
          stale-pr-message: "This pull request is stale because it has been open for 30 days with no activity. Remove this label to keep it open."
          stale-issue-label: "stale-issue"
          stale-pr-label: "stale-pr"

  fmt:
    if: github.ref_name == 'main' || github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Install Rust
        run: |
          rustup toolchain install nightly --component rustfmt
      - name: Run fmt
        run: |
          cargo +nightly fmt --all -- --check

  clippy:
    if: github.ref_name == 'main' || github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Install Rust
        run: |
          rustup toolchain install nightly --component clippy
      - name: Run clippy
        run: |
          cargo +nightly clippy --all --all-targets --all-features -- -D warnings

  trivy:
    permissions:
      contents: read
      security-events: write
      actions: read
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          exit-code: "1"
          scan-type: fs
          trivy-config: trivy.yaml
      - continue-on-error: true
        name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: "trivy-results.sarif"

  github-release:
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Create a GitHub release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release create ${{ github.ref_name }} \
            --title ${{ github.ref_name }} \
            --latest \
            --generate-notes \
            --verify-tag

  publish-crate:
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Install Rust
        run: |
          rustup toolchain install nightly
      - name: Publish
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          cargo login $CARGO_REGISTRY_TOKEN
          cargo publish --allow-dirty
